version: 2.1

orbs:
  slack: circleci/slack@3.4.2

jobs:
  test_aws:
    docker:
      - image: circleci/golang:1.15
    steps:
      - checkout
      - run:
          name: Get Terraform
          command: |
            wget https://releases.hashicorp.com/terraform/0.13.4/terraform_0.13.4_linux_amd64.zip
            unzip terraform*.zip
            sudo mv terraform /usr/local/bin
      - run:
          name: Run Go AWS tests
          command: |
            export PREFIX="$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 5 | head -n 1 | sed -E 's/^([0-9]+)(.*)/\2\1/g')"
            make test-aws
      - slack/status:
          fail_only: true
    environment:
      - TF_STATE_REGION: us-east-1
      - AWS_POLKADOT_PROVIDER_VERSION: 0.1.0
  test_gcp:
    docker:
      - image: circleci/golang:1.15
    steps:
      - checkout
      - run:
          name: Get Terraform
          command: |
            wget https://releases.hashicorp.com/terraform/0.13.4/terraform_0.13.4_linux_amd64.zip
            unzip terraform*.zip
            sudo mv terraform /usr/local/bin
      - run:
          name: Run Go GCP tests
          command: |
            echo -n "${GOOGLE_APPLICATION_CREDENTIALS_CONTENT}" > "${GOOGLE_APPLICATION_CREDENTIALS}"
            export PREFIX="$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 5 | head -n 1 | sed -E 's/^([0-9]+)(.*)/\2\1/g')"
            VERSION=$(git describe --tags --abbrev=8 --exact-match 2>/dev/null || echo "${GCP_POLKADOT_PROVIDER_VERSION}")
            [[ "${VERSION}" =~ "^gcp" ]] || VERSION="${GCP_POLKADOT_PROVIDER_VERSION}"
            VERSION=${VERSION#*-} make test-gcp
      - slack/status:
          fail_only: true
    environment:
      - GCP_POLKADOT_PROVIDER_VERSION: 0.1.0
  test_azure:
    docker:
      - image: circleci/golang:1.15
    steps:
      - checkout
      - run:
          name: Get Terraform
          command: |
            wget https://releases.hashicorp.com/terraform/0.13.4/terraform_0.13.4_linux_amd64.zip
            unzip terraform*.zip
            sudo mv terraform /usr/local/bin
      - run:
          name: "Pull Submodules"
          command: |
            git submodule init
            git submodule update --remote
      - run:
          name: Get az
          command: |
            curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
      - run:
          name: Login AZ
          command: |
            az login --service-principal --username ${AZURE_CLIENT_ID} --password ${AZURE_CLIENT_SECRET} --tenant ${AZURE_TENANT_ID}
            az account set --subscription ${AZURE_SUBSCRIPTION_ID}
            az configure --defaults group=${AZURE_RES_GROUP_NAME}
      - run:
          name: Run Go Azure tests
          command: |
            export PREFIX="$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 5 | head -n 1 | sed -E 's/^([0-9]+)(.*)/\2\1/g')"
            VERSION=$(git describe --tags --abbrev=8 --exact-match 2>/dev/null || echo "${AZURE_POLKADOT_PROVIDER_VERSION}")
            [[ "${VERSION}" =~ "^azure" ]] || VERSION="${AZURE_POLKADOT_PROVIDER_VERSION}"
            VERSION=${VERSION#*-} make test-azure
      - slack/status:
          fail_only: true
    environment:
      - AZURE_POLKADOT_PROVIDER_VERSION: 0.1.0

  build:
    machine: true
    steps:
      - checkout
      - run:
          name: Build image
          command: docker build -f docker/Dockerfile . -t ${dockerhub_repo}
      - run:
          name: Login into DockerHub
          command: echo ${dockerhub_token} | docker login -u ${dockerhub_user} --password-stdin
      - run:
          name: Push image
          command: docker push ${dockerhub_repo}:latest
      - slack/status:
          fail_only: true

  build_azure_polkadot_provider:
    docker:
      - image: circleci/golang:1.15
    steps:
      - checkout
      - run:
          name: "Pull Submodules"
          command: |
            git submodule init
            git submodule update --remote
      - run:
          name: "Publish Azure polkadot provider release on GitHub"
          command: |
            GO111MODULE=off go get github.com/tcnksm/ghr
            VERSION=$(git describe --tags --abbrev=8 --exact-match 2>/dev/null || echo "${AZURE_POLKADOT_PROVIDER_VERSION}")
            [[ "${VERSION}" =~ "^azure" ]] || VERSION="${AZURE_POLKADOT_PROVIDER_VERSION}"
            VERSION=${VERSION#*-} make build-azure-provider
            mv -v ./terraform-provider-polkadot ./terraform-provider-polkadot-azure
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${VERSION} ./terraform-provider-polkadot-azure
      - slack/status:
          fail_only: true
    environment:
      - AZURE_POLKADOT_PROVIDER_VERSION: 0.1.0

  build_gpg_polkadot_provider:
    docker:
      - image: circleci/golang:1.15
    steps:
      - checkout
      - run:
          name: "Publish GCP polkadot provider release on GitHub"
          command: |
            GO111MODULE=off go get github.com/tcnksm/ghr
            VERSION=$(git describe --tags --abbrev=8 --exact-match 2>/dev/null || echo "${GCP_POLKADOT_PROVIDER_VERSION}")
            [[ "${VERSION}" =~ "^gcp" ]] || VERSION="${GCP_POLKADOT_PROVIDER_VERSION}"
            VERSION=${VERSION#*-} make build-gcp-provider
            mv -v ./terraform-provider-polkadot ./terraform-provider-polkadot-gcp
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${VERSION} ./terraform-provider-polkadot-gcp
      - slack/status:
          fail_only: true
    environment:
      - GCP_POLKADOT_PROVIDER_VERSION: 0.1.0

workflows:
  version: 2
  build_and_test:
    jobs:
      - approve_test_azure:
          type: approval
          filters:
            branches:
              only:
                - master
                - dev
      - test_azure:
          requires:
            - approve_test_azure
      - approve_test_gcp:
          type: approval
          filters:
            branches:
              only:
                - master
                - dev
      - test_gcp:
          requires:
            - approve_test_gcp
      - approve_test_aws:
          type: approval
          filters:
            branches:
              only:
                - master
                - dev
      - test_aws:
          requires:
            - approve_test_aws
      - approve_build:
          type: approval
          requires:
            - test_azure
            - test_aws
            - test_gcp
      - build:
          requires:
            - approve_build
